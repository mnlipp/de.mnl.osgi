apply plugin: 'eclipse'
    
eclipse {
	if (!project.name.startsWith("de.mnl.osgi")) {
		// Dummy project. Nothing to do for Eclipse, but must show
		// up as project
		project {
			file {
				//closure executed after .project content is loaded from existing file
				//and after gradle build information is merged
				whenMerged { project ->
					project.natures.clear()
					project.buildCommands.clear()
				}
			}
		}
	} else {
		classpath {
			// Only for bnd projects
			if (plugins.hasPlugin('biz.aQute.bnd')) {
				containers 'aQute.bnd.classpath.container'
			}
			downloadJavadoc = true
			downloadSources = true
			file {
				whenMerged {
					// Classpath is completely handled by bnd container above
					entries.removeAll {
						it in org.gradle.plugins.ide.eclipse.model.Library
					}
					// Mark test source folders
					entries.each {
						if (it in org.gradle.plugins.ide.eclipse.model.AbstractClasspathEntry &&
							it.entryAttributes['gradle_used_by_scope'] == 'test') {
							it.entryAttributes['test'] = true
						}
					}
				}
			}
		}
		project {
			// buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
			buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
			// 'org.eclipse.buildship.core.gradleprojectnature',
			natures 'org.eclipse.jdt.core.javanature', \
            	'net.sf.eclipsecs.core.CheckstyleNature'
				'org.eclipse.jdt.groovy.core.groovyNature'
				// Only for bnd projects
				if (plugins.hasPlugin('biz.aQute.bnd')) {
					// buildCommand 'org.eclipse.jdt.core.javabuilder'
					buildCommand 'bndtools.core.bndbuilder'
					natures += 'bndtools.core.bndnature'
				}
		}
		jdt {
			file {
				withProperties { properties ->
					def formatterPrefs = new Properties()
					rootProject.file("gradle/org.eclipse.jdt.core.formatter.prefs")
						.withInputStream { formatterPrefs.load(it) }
						properties.putAll(formatterPrefs)
				}
			}
		}
	}
}
tasks.eclipse.dependsOn(cleanEclipse)

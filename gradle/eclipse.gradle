apply plugin: 'eclipse'
    
eclipse {

	project {
		file {
			// closure executed after .project content is loaded from existing file
			// and before gradle build information is merged
			beforeMerged { project ->
				project.natures.clear()
				project.buildCommands.clear()
			}
			
			project.natures += 'org.eclipse.buildship.core.gradleprojectnature'
			project.buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
			
			if (plugins.hasPlugin('biz.aQute.bnd')) {
				project.buildCommand 'org.eclipse.jdt.core.javabuilder'
				project.natures += 'net.sf.eclipsecs.core.CheckstyleNature'
				project.buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
				project.natures += 'ch.acanda.eclipse.pmd.builder.PMDNature'
				project.buildCommand 'ch.acanda.eclipse.pmd.builder.PMDBuilder'
				project.natures += 'bndtools.core.bndnature'
				project.buildCommand 'bndtools.core.bndbuilder'
			}
		}
	}

    if (plugins.hasPlugin('biz.aQute.bnd')) {
        classpath {
            downloadJavadoc = true
            downloadSources = true

			containers 'aQute.bnd.classpath.container'
			
			file {
				whenMerged {
					// Classpath is completely handled by bnd container above
					entries.removeAll {
						it in org.gradle.plugins.ide.eclipse.model.Library
					}
					// Mark test source folders
					entries.each {
						if (it in org.gradle.plugins.ide.eclipse.model.AbstractClasspathEntry &&
							it.entryAttributes['gradle_used_by_scope'] == 'test') {
							it.entryAttributes['test'] = true
						}
					}
				}
			}
        }

        jdt {
            javaRuntimeName = "JavaSE-11"
            file {
                withProperties { properties ->
                    def formatterPrefs = new Properties()
                    rootProject.file("gradle/org.eclipse.jdt.core.formatter.prefs")
                        .withInputStream { formatterPrefs.load(it) }
                    properties.putAll(formatterPrefs)
                }
            }
        }
    }

}
tasks.eclipse.dependsOn(cleanEclipse)
